{
  "address": "0x1454e343dB91a6Aad1Df60F5845049AdDf439C5E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract Settings",
          "name": "_settings_address",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "APPEALS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEALS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROVIDERS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "addToProtocol",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "addToVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositToVault",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProtocolBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setAppealsRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setDealsRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setProvidersRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "setValue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "sub",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "subFromVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferProtocolBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "vault",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFromVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdde53838083dc2dedd797f599cdeda989cf72005ceb1cdee7a1b6684db824618",
  "receipt": {
    "to": null,
    "from": "0x81A91158497A1cD700De7f6D83ee565788A9C273",
    "contractAddress": "0x1454e343dB91a6Aad1Df60F5845049AdDf439C5E",
    "transactionIndex": 1,
    "gasUsed": "75071394",
    "logsBloom": "0x0c40808c8000208029b640c0341010d28e4021044503244006809002012418c381061472094002000210384405950e0102e30305080080214a052802102400840322890040039000000000980060128c084b4200200c940091321200c3411010480500000a3404480053018404287805202001a06200460a007210380004ba40100824224517980044509014011451c20c00c080a010088802111908400600c35e00c040212242104200110200404c00a050012002000036021090806708c20209a0842268008014f010089004841120aa0281101c4a42010199c121e100e000021804004980311200501008020900006740000a0380094081840800428c6040",
    "blockHash": "0x46dcc90b12147da561bb82004f21cea2048dcb0db47ecbe3bfa053aa64657744",
    "transactionHash": "0xdde53838083dc2dedd797f599cdeda989cf72005ceb1cdee7a1b6684db824618",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 961180,
        "transactionHash": "0xdde53838083dc2dedd797f599cdeda989cf72005ceb1cdee7a1b6684db824618",
        "address": "0x1454e343dB91a6Aad1Df60F5845049AdDf439C5E",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775",
          "0x00000000000000000000000081a91158497a1cd700de7f6d83ee565788a9c273",
          "0x00000000000000000000000081a91158497a1cd700de7f6d83ee565788a9c273"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x46dcc90b12147da561bb82004f21cea2048dcb0db47ecbe3bfa053aa64657744"
      }
    ],
    "blockNumber": 961180,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x591239742B2f363e10880f74B84fDa0bd19e5F2F"
  ],
  "numDeployments": 3,
  "solcInputHash": "2e453cfa57785308548e0ed919788d06",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract Settings\",\"name\":\"_settings_address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"APPEALS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEALS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROVIDERS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"addToProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"addToVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositToVault\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtocolBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setAppealsRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setDealsRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setProvidersRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"sub\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"subFromVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferProtocolBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/retrieve/vault/Vault.sol\":\"Vault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/retrieve/functions/render/IRENDER.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\r\\n\\r\\ninterface IRENDER is IERC165 {\\r\\n    function render(\\r\\n        uint256 deal_index,\\r\\n        string memory data_uri,\\r\\n        uint256 value,\\r\\n        uint256 timestamp_start,\\r\\n        uint256 duration,\\r\\n        bool appeal,\\r\\n        address owner\\r\\n    ) external pure returns (string memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x57d802331754166e68b47c3becb9e2a2f21e1d6b1a7cc7f7a7608758345e6b93\",\"license\":\"MIT\"},\"contracts/retrieve/settings/Settings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.17;\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./../functions/render/IRENDER.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Settings for retrieval protocol adapted from retriev\\r\\n */\\r\\ncontract Settings is Ownable {\\r\\n    // admins\\r\\n    mapping(uint8 => mapping(address => bool)) public admins;\\r\\n    // Multipliers\\r\\n    uint256 public slashing_multiplier = 1000;\\r\\n    uint8 public committee_divider = 4;\\r\\n    // Deal parameters\\r\\n    uint32 public proposal_timeout = 86_400;\\r\\n    uint8 public max_appeals = 5;\\r\\n    uint256 public min_deal_value = 0;\\r\\n    // Round parameters\\r\\n    uint32 public round_duration = 300;\\r\\n    uint32 public min_duration = 86_400;\\r\\n    uint32 public max_duration = 31_536_000;\\r\\n    uint8 public slashes_threshold = 12;\\r\\n    uint8 public rounds_limit = 12;\\r\\n    // Render contract\\r\\n    IRENDER public token_render;\\r\\n    // Contract state variables\\r\\n    bool public contract_protected = false;\\r\\n    bool public permissioned_providers = false;\\r\\n    // Protocol address\\r\\n    address public protocol_address;\\r\\n\\r\\n    constructor(address _protocol_address) {\\r\\n        require(_protocol_address != address(0), \\\"Can't init protocol with black-hole\\\");\\r\\n        protocol_address = _protocol_address;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n        Admin function to setup roles\\r\\n    */\\r\\n\\r\\n    function setRole(uint8 kind, bool status, address admin) external {\\r\\n        // Set specified role, using:\\r\\n        // 1 - Protocol managers\\r\\n        // 2 - Referees managers\\r\\n        // 3 - Providers managers\\r\\n        admins[kind][admin] = status;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n        Admin functions to fine tune protocol\\r\\n    */\\r\\n    function tuneRefereesVariables(uint8 kind, uint8 value8, uint32 value32) external {\\r\\n        require(msg.sender == owner() || admins[2][msg.sender], \\\"Can't manage referees variables\\\");\\r\\n        if (kind == 0) {\\r\\n            committee_divider = value8;\\r\\n        } else if (kind == 1) {\\r\\n            max_appeals = value8;\\r\\n        } else if (kind == 2) {\\r\\n            round_duration = value32;\\r\\n        } else if (kind == 3) {\\r\\n            rounds_limit = value8;\\r\\n        } else if (kind == 4) {\\r\\n            slashes_threshold = value8;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function tuneProvidersVariables(uint8 kind, uint256 value256, uint32 value32) external {\\r\\n        require(msg.sender == owner() || admins[3][msg.sender], \\\"Can't manage providers variables\\\");\\r\\n        if (kind == 0) {\\r\\n            proposal_timeout = value32;\\r\\n        } else if (kind == 1) {\\r\\n            min_deal_value = value256;\\r\\n        } else if (kind == 2) {\\r\\n            slashing_multiplier = value256;\\r\\n        } else if (kind == 3) {\\r\\n            min_duration = value32;\\r\\n        } else if (kind == 4) {\\r\\n            max_duration = value32;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function tuneProtocolVariables(uint8 kind, address addy, bool state) external {\\r\\n        require(msg.sender == owner() || admins[1][msg.sender], \\\"Can't manage protocol variables\\\");\\r\\n        if (kind == 0) {\\r\\n            token_render = IRENDER(addy);\\r\\n        } else if (kind == 1) {\\r\\n            protocol_address = addy;\\r\\n        } else if (kind == 2) {\\r\\n            contract_protected = state;\\r\\n        } else if (kind == 3) {\\r\\n            permissioned_providers = state;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb86002576dcd222a7fc62fe7e252f3583c382ce36e8cbe0e4bda109a786a4cc7\",\"license\":\"MIT\"},\"contracts/retrieve/vault/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\nimport \\\"./../settings/Settings.sol\\\";\\r\\n\\r\\ncontract Vault is ReentrancyGuard, AccessControl {\\r\\n    // Referee, Providers and Clients vault\\r\\n    mapping(address => uint256) public vault;\\r\\n    bytes32 public constant APPEALS_ROLE = keccak256(\\\"APPEALS_ROLE\\\");\\r\\n    bytes32 public constant DEALS_ROLE = keccak256(\\\"DEALS_ROLE\\\");\\r\\n    bytes32 public constant PROVIDERS_ROLE = keccak256(\\\"PROVIDERS_ROLE\\\");\\r\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\r\\n    Settings settings;\\r\\n\\r\\n    constructor(Settings _settings_address) {\\r\\n        _grantRole(ADMIN_ROLE, msg.sender);\\r\\n        settings = Settings(_settings_address);\\r\\n    }\\r\\n\\r\\n    function setAppealsRole(address _address) external {\\r\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Caller is not an admin\\\");\\r\\n        _grantRole(APPEALS_ROLE, _address);\\r\\n    }\\r\\n\\r\\n    function setProvidersRole(address _address) external {\\r\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Caller is not an admin\\\");\\r\\n        _grantRole(PROVIDERS_ROLE, _address);\\r\\n    }\\r\\n\\r\\n    function setDealsRole(address _address) external {\\r\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Caller is not an admin\\\");\\r\\n        _grantRole(DEALS_ROLE, _address);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n        This method will allow provider deposit ETH in order to accept deals\\r\\n    */\\r\\n    function depositToVault() external payable nonReentrant {\\r\\n        // require(isProvider(msg.sender), \\\"Only providers can deposit into contract\\\");\\r\\n        require(msg.value > 0, \\\"Must send some value\\\");\\r\\n        vault[msg.sender] += msg.value;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n        This method will allow to withdraw ethers from contract\\r\\n    */\\r\\n    function withdrawFromVault(uint256 amount) external nonReentrant {\\r\\n        uint256 balance = vault[msg.sender];\\r\\n        require(balance >= amount, \\\"Not enough balance to withdraw\\\");\\r\\n        vault[msg.sender] -= amount;\\r\\n        bool success;\\r\\n        (success, ) = payable(msg.sender).call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Withdraw to user failed\\\");\\r\\n    }\\r\\n\\r\\n    function getProtocolBalance() public view returns (uint256) {\\r\\n        return vault[settings.protocol_address()];\\r\\n    }\\r\\n\\r\\n    function transferProtocolBalance(uint256 amount) external nonReentrant {\\r\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Caller is not authorized\\\");\\r\\n        uint256 balance = vault[settings.protocol_address()];\\r\\n        require(balance >= amount, \\\"Not enough balance to withdraw\\\");\\r\\n        vault[settings.protocol_address()] -= amount;\\r\\n        bool success;\\r\\n        (success, ) = payable(msg.sender).call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Withdraw to user failed\\\");\\r\\n    }\\r\\n\\r\\n    function setValue(address _address, uint256 _value) public {\\r\\n        require(\\r\\n            hasRole(APPEALS_ROLE, msg.sender) ||\\r\\n                hasRole(DEALS_ROLE, msg.sender) ||\\r\\n                hasRole(PROVIDERS_ROLE, msg.sender),\\r\\n            \\\"Caller is not authorized\\\"\\r\\n        );\\r\\n        vault[_address] = _value;\\r\\n    }\\r\\n\\r\\n    function sub(address _address, uint256 _value) public {\\r\\n        require(\\r\\n            hasRole(APPEALS_ROLE, msg.sender) ||\\r\\n                hasRole(DEALS_ROLE, msg.sender) ||\\r\\n                hasRole(PROVIDERS_ROLE, msg.sender),\\r\\n            \\\"Caller is not authorized\\\"\\r\\n        );\\r\\n        vault[_address] -= _value;\\r\\n    }\\r\\n\\r\\n    function add(address _address, uint256 _value) public {\\r\\n        require(\\r\\n            hasRole(APPEALS_ROLE, msg.sender) ||\\r\\n                hasRole(DEALS_ROLE, msg.sender) ||\\r\\n                hasRole(PROVIDERS_ROLE, msg.sender),\\r\\n            \\\"Caller is not authorized\\\"\\r\\n        );\\r\\n        vault[_address] += _value;\\r\\n    }\\r\\n\\r\\n    function addToVault(uint256 _value) public {\\r\\n        require(\\r\\n            hasRole(APPEALS_ROLE, msg.sender) ||\\r\\n                hasRole(DEALS_ROLE, msg.sender) ||\\r\\n                hasRole(PROVIDERS_ROLE, msg.sender),\\r\\n            \\\"Caller is not authorized\\\"\\r\\n        );\\r\\n        vault[address(this)] += _value;\\r\\n    }\\r\\n\\r\\n    function subFromVault(uint256 _value) public {\\r\\n        require(\\r\\n            hasRole(APPEALS_ROLE, msg.sender) ||\\r\\n                hasRole(DEALS_ROLE, msg.sender) ||\\r\\n                hasRole(PROVIDERS_ROLE, msg.sender),\\r\\n            \\\"Caller is not authorized\\\"\\r\\n        );\\r\\n        vault[address(this)] -= _value;\\r\\n    }\\r\\n\\r\\n    function addToProtocol(uint256 _value) public {\\r\\n        require(\\r\\n            hasRole(APPEALS_ROLE, msg.sender) ||\\r\\n                hasRole(DEALS_ROLE, msg.sender) ||\\r\\n                hasRole(PROVIDERS_ROLE, msg.sender),\\r\\n            \\\"Caller is not authorized\\\"\\r\\n        );\\r\\n        vault[settings.protocol_address()] += _value;\\r\\n    }\\r\\n\\r\\n    function getBalance(address _address) public view returns (uint256) {\\r\\n        return vault[_address];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xc779ac0494e3efa2560c7a1dcee531b615563446a3d83cd3babbabd80536df12\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001c6838038062001c6883398101604081905262000034916200016d565b6001600055620000657fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775336200008b565b600380546001600160a01b0319166001600160a01b03929092169190911790556200019a565b620000978282620000fa565b620000f65760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45b5050565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff165b92915050565b60006001600160a01b03821662000121565b6000620001218262000127565b620001518162000139565b81146200015d57600080fd5b50565b8051620001218162000146565b600060208284031215620001845762000184600080fd5b600062000192848462000160565b949350505050565b611abe80620001aa6000396000f3fe6080604052600436106101a15760003560e01c806375b238fc116100e1578063ac7ffbb71161008a578063f33e225211610064578063f33e2252146104e4578063f5d82b6b14610504578063f815c03d14610524578063f8b2cb4f1461055157600080fd5b8063ac7ffbb714610484578063d547741f146104a4578063e7b4315f146104c457600080fd5b806398c991b3116100bb57806398c991b31461041b5780639c7a46ad1461043b578063a217fddf1461046f57600080fd5b806375b238fc1461038157806378cbff54146103b557806391d14854146103d557600080fd5b806336568abe1161014e5780634444ccae116101285780634444ccae1461030557806348461b561461030d5780637041ee751461032d578063752086f01461036157600080fd5b806336568abe146102915780633691a9e2146102b1578063423f8eb9146102d157600080fd5b8063248a9ca31161017f578063248a9ca31461022057806326ffee08146102515780632f2ff15d1461027157600080fd5b806301ffc9a7146101a6578063076d0815146101dc57806314e7c922146101fe575b600080fd5b3480156101b257600080fd5b506101c66101c136600461154e565b610587565b6040516101d39190611581565b60405180910390f35b3480156101e857600080fd5b506101fc6101f73660046115a0565b610620565b005b34801561020a57600080fd5b5061021361070c565b6040516101d391906115c7565b34801561022c57600080fd5b5061021361023b3660046115a0565b6000908152600160208190526040909120015490565b34801561025d57600080fd5b506101fc61026c3660046115fa565b6107af565b34801561027d57600080fd5b506101fc61028c366004611637565b6108a0565b34801561029d57600080fd5b506101fc6102ac366004611637565b6108cb565b3480156102bd57600080fd5b506101fc6102cc3660046115a0565b610901565b3480156102dd57600080fd5b506102137f6f303e5d99a797b2cefa97a758225e78ea8e52098d31c72b8cc6dc7b82e7821081565b6101fc6109e8565b34801561031957600080fd5b506101fc6103283660046115fa565b610a3b565b34801561033957600080fd5b506102137fb16f7460d04a2c34afa257e83d3490b91caa450e7af05fad7bddf0cc851a677181565b34801561036d57600080fd5b506101fc61037c36600461166a565b610b17565b34801561038d57600080fd5b506102137fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b3480156103c157600080fd5b506101fc6103d03660046115a0565b610b8f565b3480156103e157600080fd5b506101c66103f0366004611637565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b34801561042757600080fd5b506101fc6104363660046115a0565b610d50565b34801561044757600080fd5b506102137f51f57cbb3e94f77825a300c48dc80ba0f416227d0be26b31e1030bc9eb66882981565b34801561047b57600080fd5b50610213600081565b34801561049057600080fd5b506101fc61049f36600461166a565b610ebb565b3480156104b057600080fd5b506101fc6104bf366004611637565b610f33565b3480156104d057600080fd5b506101fc6104df36600461166a565b610f59565b3480156104f057600080fd5b506101fc6104ff3660046115a0565b610fd1565b34801561051057600080fd5b506101fc61051f3660046115fa565b6110b0565b34801561053057600080fd5b5061021361053f36600461166a565b60026020526000908152604090205481565b34801561055d57600080fd5b5061021361056c36600461166a565b6001600160a01b031660009081526002602052604090205490565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061061a57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b610628611198565b33600090815260026020526040902054818110156106615760405162461bcd60e51b8152600401610658906116c2565b60405180910390fd5b33600090815260026020526040812080548492906106809084906116e8565b909155505060405160009033908490610698906116fb565b60006040518083038185875af1925050503d80600081146106d5576040519150601f19603f3d011682016040523d82523d6000602084013e6106da565b606091505b505080915050806106fd5760405162461bcd60e51b815260040161065890611737565b50506107096001600055565b50565b600060026000600360009054906101000a90046001600160a01b03166001600160a01b0316636694c06c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610765573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107899190611752565b6001600160a01b03166001600160a01b0316815260200190815260200160002054905090565b3360009081527fac9c2da00bca14d6f17eab721b8402a679491611e77b0bf58115d2828bca5b2c602052604090205460ff168061081a57503360009081527f3604b56a4f593c3daecb45a60ea72ca4de6ff0cd2f0d1d530343b6666d8ecff8602052604090205460ff165b8061085357503360009081527f9a6362199b32129f7b83310641f11b8ac865dd3750b100a28c6c45889c433f50602052604090205460ff165b61086f5760405162461bcd60e51b8152600401610658906117a7565b6001600160a01b038216600090815260026020526040812080548392906108979084906116e8565b90915550505050565b600082815260016020819052604090912001546108bc816111c1565b6108c683836111cb565b505050565b6001600160a01b03811633146108f35760405162461bcd60e51b8152600401610658906117b7565b6108fd8282611252565b5050565b3360009081527fac9c2da00bca14d6f17eab721b8402a679491611e77b0bf58115d2828bca5b2c602052604090205460ff168061096c57503360009081527f3604b56a4f593c3daecb45a60ea72ca4de6ff0cd2f0d1d530343b6666d8ecff8602052604090205460ff165b806109a557503360009081527f9a6362199b32129f7b83310641f11b8ac865dd3750b100a28c6c45889c433f50602052604090205460ff165b6109c15760405162461bcd60e51b8152600401610658906117a7565b30600090815260026020526040812080548392906109e0908490611818565b909155505050565b6109f0611198565b60003411610a105760405162461bcd60e51b81526004016106589061185f565b3360009081526002602052604081208054349290610a2f908490611818565b90915550506001600055565b3360009081527fac9c2da00bca14d6f17eab721b8402a679491611e77b0bf58115d2828bca5b2c602052604090205460ff1680610aa657503360009081527f3604b56a4f593c3daecb45a60ea72ca4de6ff0cd2f0d1d530343b6666d8ecff8602052604090205460ff165b80610adf57503360009081527f9a6362199b32129f7b83310641f11b8ac865dd3750b100a28c6c45889c433f50602052604090205460ff165b610afb5760405162461bcd60e51b8152600401610658906117a7565b6001600160a01b03909116600090815260026020526040902055565b3360009081527f50efbde2d46c37e9785f1791697f77e94bb7b701e19f1930a668820722d37694602052604090205460ff16610b655760405162461bcd60e51b8152600401610658906118a3565b6107097f6f303e5d99a797b2cefa97a758225e78ea8e52098d31c72b8cc6dc7b82e78210826111cb565b610b97611198565b3360009081527f50efbde2d46c37e9785f1791697f77e94bb7b701e19f1930a668820722d37694602052604090205460ff16610be55760405162461bcd60e51b8152600401610658906117a7565b600060026000600360009054906101000a90046001600160a01b03166001600160a01b0316636694c06c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c629190611752565b6001600160a01b03166001600160a01b0316815260200190815260200160002054905081811015610ca55760405162461bcd60e51b8152600401610658906116c2565b8160026000600360009054906101000a90046001600160a01b03166001600160a01b0316636694c06c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d219190611752565b6001600160a01b03166001600160a01b03168152602001908152602001600020600082825461068091906116e8565b3360009081527fac9c2da00bca14d6f17eab721b8402a679491611e77b0bf58115d2828bca5b2c602052604090205460ff1680610dbb57503360009081527f3604b56a4f593c3daecb45a60ea72ca4de6ff0cd2f0d1d530343b6666d8ecff8602052604090205460ff165b80610df457503360009081527f9a6362199b32129f7b83310641f11b8ac865dd3750b100a28c6c45889c433f50602052604090205460ff165b610e105760405162461bcd60e51b8152600401610658906117a7565b8060026000600360009054906101000a90046001600160a01b03166001600160a01b0316636694c06c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8c9190611752565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546109e09190611818565b3360009081527f50efbde2d46c37e9785f1791697f77e94bb7b701e19f1930a668820722d37694602052604090205460ff16610f095760405162461bcd60e51b8152600401610658906118a3565b6107097fb16f7460d04a2c34afa257e83d3490b91caa450e7af05fad7bddf0cc851a6771826111cb565b60008281526001602081905260409091200154610f4f816111c1565b6108c68383611252565b3360009081527f50efbde2d46c37e9785f1791697f77e94bb7b701e19f1930a668820722d37694602052604090205460ff16610fa75760405162461bcd60e51b8152600401610658906118a3565b6107097f51f57cbb3e94f77825a300c48dc80ba0f416227d0be26b31e1030bc9eb668829826111cb565b3360009081527fac9c2da00bca14d6f17eab721b8402a679491611e77b0bf58115d2828bca5b2c602052604090205460ff168061103c57503360009081527f3604b56a4f593c3daecb45a60ea72ca4de6ff0cd2f0d1d530343b6666d8ecff8602052604090205460ff165b8061107557503360009081527f9a6362199b32129f7b83310641f11b8ac865dd3750b100a28c6c45889c433f50602052604090205460ff165b6110915760405162461bcd60e51b8152600401610658906117a7565b30600090815260026020526040812080548392906109e09084906116e8565b3360009081527fac9c2da00bca14d6f17eab721b8402a679491611e77b0bf58115d2828bca5b2c602052604090205460ff168061111b57503360009081527f3604b56a4f593c3daecb45a60ea72ca4de6ff0cd2f0d1d530343b6666d8ecff8602052604090205460ff165b8061115457503360009081527f9a6362199b32129f7b83310641f11b8ac865dd3750b100a28c6c45889c433f50602052604090205460ff165b6111705760405162461bcd60e51b8152600401610658906117a7565b6001600160a01b03821660009081526002602052604081208054839290610897908490611818565b6002600054036111ba5760405162461bcd60e51b8152600401610658906118e7565b6002600055565b61070981336112d5565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff166108fd5760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff16156108fd5760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff166108fd576113088161134a565b61131383602061135c565b60405160200161132492919061193d565b60408051601f198184030181529082905262461bcd60e51b8252610658916004016119d3565b606061061a6001600160a01b03831660145b6060600061136b8360026119e4565b611376906002611818565b67ffffffffffffffff81111561138e5761138e611a03565b6040519080825280601f01601f1916602001820160405280156113b8576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106113ef576113ef611a19565b60200101906001600160f81b031916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061143a5761143a611a19565b60200101906001600160f81b031916908160001a905350600061145e8460026119e4565b611469906001611818565b90505b60018111156114ee577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106114aa576114aa611a19565b1a60f81b8282815181106114c0576114c0611a19565b60200101906001600160f81b031916908160001a90535060049490941c936114e781611a2f565b905061146c565b50831561150d5760405162461bcd60e51b815260040161065890611a78565b9392505050565b7fffffffff0000000000000000000000000000000000000000000000000000000081165b811461070957600080fd5b803561061a81611514565b60006020828403121561156357611563600080fd5b600061156f8484611543565b949350505050565b8015155b82525050565b6020810161061a8284611577565b80611538565b803561061a8161158f565b6000602082840312156115b5576115b5600080fd5b600061156f8484611595565b8061157b565b6020810161061a82846115c1565b60006001600160a01b03821661061a565b611538816115d5565b803561061a816115e6565b6000806040838503121561161057611610600080fd5b600061161c85856115ef565b925050602061162d85828601611595565b9150509250929050565b6000806040838503121561164d5761164d600080fd5b60006116598585611595565b925050602061162d858286016115ef565b60006020828403121561167f5761167f600080fd5b600061156f84846115ef565b601e81526000602082017f4e6f7420656e6f7567682062616c616e636520746f2077697468647261770000815291505b5060200190565b6020808252810161061a8161168b565b634e487b7160e01b600052601160045260246000fd5b8181038181111561061a5761061a6116d2565b60008161061a565b601781526000602082017f576974686472617720746f2075736572206661696c6564000000000000000000815291506116bb565b6020808252810161061a81611703565b805161061a816115e6565b60006020828403121561176757611767600080fd5b600061156f8484611747565b601881526000602082017f43616c6c6572206973206e6f7420617574686f72697a65640000000000000000815291506116bb565b6020808252810161061a81611773565b6020808252810161061a81602f81527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560208201527f20726f6c657320666f722073656c660000000000000000000000000000000000604082015260600190565b8082018082111561061a5761061a6116d2565b601481526000602082017f4d7573742073656e6420736f6d652076616c7565000000000000000000000000815291506116bb565b6020808252810161061a8161182b565b601681526000602082017f43616c6c6572206973206e6f7420616e2061646d696e00000000000000000000815291506116bb565b6020808252810161061a8161186f565b601f81526000602082017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00815291506116bb565b6020808252810161061a816118b3565b60005b838110156119125781810151838201526020016118fa565b50506000910152565b6000611925825190565b6119338185602086016118f7565b9290920192915050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152601701600061196f828561191b565b7f206973206d697373696e6720726f6c65200000000000000000000000000000008152601101915061156f828461191b565b60006119ab825190565b8084526020840193506119c28185602086016118f7565b601f01601f19169290920192915050565b6020808252810161150d81846119a1565b8181028082158382048514176119fc576119fc6116d2565b5092915050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600081611a3e57611a3e6116d2565b506000190190565b60208082527f537472696e67733a20686578206c656e67746820696e73756666696369656e74910190815260006116bb565b6020808252810161061a81611a4656fea26469706673582212207fb784b3e158c696c69940728cbe5e47eb8dd8d5d3bdff5c73be74db406a32af64736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106101a15760003560e01c806375b238fc116100e1578063ac7ffbb71161008a578063f33e225211610064578063f33e2252146104e4578063f5d82b6b14610504578063f815c03d14610524578063f8b2cb4f1461055157600080fd5b8063ac7ffbb714610484578063d547741f146104a4578063e7b4315f146104c457600080fd5b806398c991b3116100bb57806398c991b31461041b5780639c7a46ad1461043b578063a217fddf1461046f57600080fd5b806375b238fc1461038157806378cbff54146103b557806391d14854146103d557600080fd5b806336568abe1161014e5780634444ccae116101285780634444ccae1461030557806348461b561461030d5780637041ee751461032d578063752086f01461036157600080fd5b806336568abe146102915780633691a9e2146102b1578063423f8eb9146102d157600080fd5b8063248a9ca31161017f578063248a9ca31461022057806326ffee08146102515780632f2ff15d1461027157600080fd5b806301ffc9a7146101a6578063076d0815146101dc57806314e7c922146101fe575b600080fd5b3480156101b257600080fd5b506101c66101c136600461154e565b610587565b6040516101d39190611581565b60405180910390f35b3480156101e857600080fd5b506101fc6101f73660046115a0565b610620565b005b34801561020a57600080fd5b5061021361070c565b6040516101d391906115c7565b34801561022c57600080fd5b5061021361023b3660046115a0565b6000908152600160208190526040909120015490565b34801561025d57600080fd5b506101fc61026c3660046115fa565b6107af565b34801561027d57600080fd5b506101fc61028c366004611637565b6108a0565b34801561029d57600080fd5b506101fc6102ac366004611637565b6108cb565b3480156102bd57600080fd5b506101fc6102cc3660046115a0565b610901565b3480156102dd57600080fd5b506102137f6f303e5d99a797b2cefa97a758225e78ea8e52098d31c72b8cc6dc7b82e7821081565b6101fc6109e8565b34801561031957600080fd5b506101fc6103283660046115fa565b610a3b565b34801561033957600080fd5b506102137fb16f7460d04a2c34afa257e83d3490b91caa450e7af05fad7bddf0cc851a677181565b34801561036d57600080fd5b506101fc61037c36600461166a565b610b17565b34801561038d57600080fd5b506102137fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b3480156103c157600080fd5b506101fc6103d03660046115a0565b610b8f565b3480156103e157600080fd5b506101c66103f0366004611637565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b34801561042757600080fd5b506101fc6104363660046115a0565b610d50565b34801561044757600080fd5b506102137f51f57cbb3e94f77825a300c48dc80ba0f416227d0be26b31e1030bc9eb66882981565b34801561047b57600080fd5b50610213600081565b34801561049057600080fd5b506101fc61049f36600461166a565b610ebb565b3480156104b057600080fd5b506101fc6104bf366004611637565b610f33565b3480156104d057600080fd5b506101fc6104df36600461166a565b610f59565b3480156104f057600080fd5b506101fc6104ff3660046115a0565b610fd1565b34801561051057600080fd5b506101fc61051f3660046115fa565b6110b0565b34801561053057600080fd5b5061021361053f36600461166a565b60026020526000908152604090205481565b34801561055d57600080fd5b5061021361056c36600461166a565b6001600160a01b031660009081526002602052604090205490565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061061a57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b610628611198565b33600090815260026020526040902054818110156106615760405162461bcd60e51b8152600401610658906116c2565b60405180910390fd5b33600090815260026020526040812080548492906106809084906116e8565b909155505060405160009033908490610698906116fb565b60006040518083038185875af1925050503d80600081146106d5576040519150601f19603f3d011682016040523d82523d6000602084013e6106da565b606091505b505080915050806106fd5760405162461bcd60e51b815260040161065890611737565b50506107096001600055565b50565b600060026000600360009054906101000a90046001600160a01b03166001600160a01b0316636694c06c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610765573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107899190611752565b6001600160a01b03166001600160a01b0316815260200190815260200160002054905090565b3360009081527fac9c2da00bca14d6f17eab721b8402a679491611e77b0bf58115d2828bca5b2c602052604090205460ff168061081a57503360009081527f3604b56a4f593c3daecb45a60ea72ca4de6ff0cd2f0d1d530343b6666d8ecff8602052604090205460ff165b8061085357503360009081527f9a6362199b32129f7b83310641f11b8ac865dd3750b100a28c6c45889c433f50602052604090205460ff165b61086f5760405162461bcd60e51b8152600401610658906117a7565b6001600160a01b038216600090815260026020526040812080548392906108979084906116e8565b90915550505050565b600082815260016020819052604090912001546108bc816111c1565b6108c683836111cb565b505050565b6001600160a01b03811633146108f35760405162461bcd60e51b8152600401610658906117b7565b6108fd8282611252565b5050565b3360009081527fac9c2da00bca14d6f17eab721b8402a679491611e77b0bf58115d2828bca5b2c602052604090205460ff168061096c57503360009081527f3604b56a4f593c3daecb45a60ea72ca4de6ff0cd2f0d1d530343b6666d8ecff8602052604090205460ff165b806109a557503360009081527f9a6362199b32129f7b83310641f11b8ac865dd3750b100a28c6c45889c433f50602052604090205460ff165b6109c15760405162461bcd60e51b8152600401610658906117a7565b30600090815260026020526040812080548392906109e0908490611818565b909155505050565b6109f0611198565b60003411610a105760405162461bcd60e51b81526004016106589061185f565b3360009081526002602052604081208054349290610a2f908490611818565b90915550506001600055565b3360009081527fac9c2da00bca14d6f17eab721b8402a679491611e77b0bf58115d2828bca5b2c602052604090205460ff1680610aa657503360009081527f3604b56a4f593c3daecb45a60ea72ca4de6ff0cd2f0d1d530343b6666d8ecff8602052604090205460ff165b80610adf57503360009081527f9a6362199b32129f7b83310641f11b8ac865dd3750b100a28c6c45889c433f50602052604090205460ff165b610afb5760405162461bcd60e51b8152600401610658906117a7565b6001600160a01b03909116600090815260026020526040902055565b3360009081527f50efbde2d46c37e9785f1791697f77e94bb7b701e19f1930a668820722d37694602052604090205460ff16610b655760405162461bcd60e51b8152600401610658906118a3565b6107097f6f303e5d99a797b2cefa97a758225e78ea8e52098d31c72b8cc6dc7b82e78210826111cb565b610b97611198565b3360009081527f50efbde2d46c37e9785f1791697f77e94bb7b701e19f1930a668820722d37694602052604090205460ff16610be55760405162461bcd60e51b8152600401610658906117a7565b600060026000600360009054906101000a90046001600160a01b03166001600160a01b0316636694c06c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c629190611752565b6001600160a01b03166001600160a01b0316815260200190815260200160002054905081811015610ca55760405162461bcd60e51b8152600401610658906116c2565b8160026000600360009054906101000a90046001600160a01b03166001600160a01b0316636694c06c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d219190611752565b6001600160a01b03166001600160a01b03168152602001908152602001600020600082825461068091906116e8565b3360009081527fac9c2da00bca14d6f17eab721b8402a679491611e77b0bf58115d2828bca5b2c602052604090205460ff1680610dbb57503360009081527f3604b56a4f593c3daecb45a60ea72ca4de6ff0cd2f0d1d530343b6666d8ecff8602052604090205460ff165b80610df457503360009081527f9a6362199b32129f7b83310641f11b8ac865dd3750b100a28c6c45889c433f50602052604090205460ff165b610e105760405162461bcd60e51b8152600401610658906117a7565b8060026000600360009054906101000a90046001600160a01b03166001600160a01b0316636694c06c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8c9190611752565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546109e09190611818565b3360009081527f50efbde2d46c37e9785f1791697f77e94bb7b701e19f1930a668820722d37694602052604090205460ff16610f095760405162461bcd60e51b8152600401610658906118a3565b6107097fb16f7460d04a2c34afa257e83d3490b91caa450e7af05fad7bddf0cc851a6771826111cb565b60008281526001602081905260409091200154610f4f816111c1565b6108c68383611252565b3360009081527f50efbde2d46c37e9785f1791697f77e94bb7b701e19f1930a668820722d37694602052604090205460ff16610fa75760405162461bcd60e51b8152600401610658906118a3565b6107097f51f57cbb3e94f77825a300c48dc80ba0f416227d0be26b31e1030bc9eb668829826111cb565b3360009081527fac9c2da00bca14d6f17eab721b8402a679491611e77b0bf58115d2828bca5b2c602052604090205460ff168061103c57503360009081527f3604b56a4f593c3daecb45a60ea72ca4de6ff0cd2f0d1d530343b6666d8ecff8602052604090205460ff165b8061107557503360009081527f9a6362199b32129f7b83310641f11b8ac865dd3750b100a28c6c45889c433f50602052604090205460ff165b6110915760405162461bcd60e51b8152600401610658906117a7565b30600090815260026020526040812080548392906109e09084906116e8565b3360009081527fac9c2da00bca14d6f17eab721b8402a679491611e77b0bf58115d2828bca5b2c602052604090205460ff168061111b57503360009081527f3604b56a4f593c3daecb45a60ea72ca4de6ff0cd2f0d1d530343b6666d8ecff8602052604090205460ff165b8061115457503360009081527f9a6362199b32129f7b83310641f11b8ac865dd3750b100a28c6c45889c433f50602052604090205460ff165b6111705760405162461bcd60e51b8152600401610658906117a7565b6001600160a01b03821660009081526002602052604081208054839290610897908490611818565b6002600054036111ba5760405162461bcd60e51b8152600401610658906118e7565b6002600055565b61070981336112d5565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff166108fd5760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff16156108fd5760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff166108fd576113088161134a565b61131383602061135c565b60405160200161132492919061193d565b60408051601f198184030181529082905262461bcd60e51b8252610658916004016119d3565b606061061a6001600160a01b03831660145b6060600061136b8360026119e4565b611376906002611818565b67ffffffffffffffff81111561138e5761138e611a03565b6040519080825280601f01601f1916602001820160405280156113b8576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106113ef576113ef611a19565b60200101906001600160f81b031916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061143a5761143a611a19565b60200101906001600160f81b031916908160001a905350600061145e8460026119e4565b611469906001611818565b90505b60018111156114ee577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106114aa576114aa611a19565b1a60f81b8282815181106114c0576114c0611a19565b60200101906001600160f81b031916908160001a90535060049490941c936114e781611a2f565b905061146c565b50831561150d5760405162461bcd60e51b815260040161065890611a78565b9392505050565b7fffffffff0000000000000000000000000000000000000000000000000000000081165b811461070957600080fd5b803561061a81611514565b60006020828403121561156357611563600080fd5b600061156f8484611543565b949350505050565b8015155b82525050565b6020810161061a8284611577565b80611538565b803561061a8161158f565b6000602082840312156115b5576115b5600080fd5b600061156f8484611595565b8061157b565b6020810161061a82846115c1565b60006001600160a01b03821661061a565b611538816115d5565b803561061a816115e6565b6000806040838503121561161057611610600080fd5b600061161c85856115ef565b925050602061162d85828601611595565b9150509250929050565b6000806040838503121561164d5761164d600080fd5b60006116598585611595565b925050602061162d858286016115ef565b60006020828403121561167f5761167f600080fd5b600061156f84846115ef565b601e81526000602082017f4e6f7420656e6f7567682062616c616e636520746f2077697468647261770000815291505b5060200190565b6020808252810161061a8161168b565b634e487b7160e01b600052601160045260246000fd5b8181038181111561061a5761061a6116d2565b60008161061a565b601781526000602082017f576974686472617720746f2075736572206661696c6564000000000000000000815291506116bb565b6020808252810161061a81611703565b805161061a816115e6565b60006020828403121561176757611767600080fd5b600061156f8484611747565b601881526000602082017f43616c6c6572206973206e6f7420617574686f72697a65640000000000000000815291506116bb565b6020808252810161061a81611773565b6020808252810161061a81602f81527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560208201527f20726f6c657320666f722073656c660000000000000000000000000000000000604082015260600190565b8082018082111561061a5761061a6116d2565b601481526000602082017f4d7573742073656e6420736f6d652076616c7565000000000000000000000000815291506116bb565b6020808252810161061a8161182b565b601681526000602082017f43616c6c6572206973206e6f7420616e2061646d696e00000000000000000000815291506116bb565b6020808252810161061a8161186f565b601f81526000602082017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00815291506116bb565b6020808252810161061a816118b3565b60005b838110156119125781810151838201526020016118fa565b50506000910152565b6000611925825190565b6119338185602086016118f7565b9290920192915050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152601701600061196f828561191b565b7f206973206d697373696e6720726f6c65200000000000000000000000000000008152601101915061156f828461191b565b60006119ab825190565b8084526020840193506119c28185602086016118f7565b601f01601f19169290920192915050565b6020808252810161150d81846119a1565b8181028082158382048514176119fc576119fc6116d2565b5092915050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600081611a3e57611a3e6116d2565b506000190190565b60208082527f537472696e67733a20686578206c656e67746820696e73756666696369656e74910190815260006116bb565b6020808252810161061a81611a4656fea26469706673582212207fb784b3e158c696c69940728cbe5e47eb8dd8d5d3bdff5c73be74db406a32af64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 933,
        "contract": "contracts/retrieve/vault/Vault.sol:Vault",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 445,
        "contract": "contracts/retrieve/vault/Vault.sol:Vault",
        "label": "_roles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)440_storage)"
      },
      {
        "astId": 12383,
        "contract": "contracts/retrieve/vault/Vault.sol:Vault",
        "label": "vault",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12406,
        "contract": "contracts/retrieve/vault/Vault.sol:Vault",
        "label": "settings",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(Settings)12370"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(Settings)12370": {
        "encoding": "inplace",
        "label": "contract Settings",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)440_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)440_storage"
      },
      "t_struct(RoleData)440_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 437,
            "contract": "contracts/retrieve/vault/Vault.sol:Vault",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 439,
            "contract": "contracts/retrieve/vault/Vault.sol:Vault",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}